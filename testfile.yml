---
AWSTemplateFormatVersion: '2010-09-09'
Description: Cloudformation template to deploy a ECS cluster using CI/CD Pipeline
Parameters:
  VpcCIDR:
    Type: String
    Default: 18.0.0.0/16
    Description: CIDR block for the VPC

  PublicSubnet1CIDR:
    Type: String
    Default: 18.0.0.0/24
    Description: CIDR block for the public subnet

  PrivateSubnet1CIDR:
    Type: String
    Default: 18.0.1.0/24
    Description: CIDR block for the private subnet

  PublicSubnet2CIDR:
    Type: String
    Default: 18.0.2.0/24
    Description: CIDR block for the public subnet

  PrivateSubnet2CIDR:
    Type: String
    Default: 18.0.3.0/24
    Description: CIDR block for the private subnet

  GitHubOwner:
    Description: Name of GitHub Owner
    Type: String
    Default: hammadkhaliq566

  GitHubRepo:
    Description: Name of GitHub Repo
    Type: String
    Default: AWS-ECS-Project

  GitHubBranch:
    Description: Name of GitHub Repo Branch
    Type: String
    Default: main

  GitHubOAuthToken:
    Type: String
    NoEcho: true
    Default: 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

  BuckerName:
    Description: S3 Bucket Name
    Type: String
    Default: ecs-deployment-devops-project

Resources:

 ---
AWSTemplateFormatVersion: '2010-09-09'
Description: The template used to create an ECS Service from the ECS Console.
Parameters:
  ECSClusterName:
    Type: String
    Default: demo
  SecurityGroupName:
    Type: CommaDelimitedList
    Default: ECS-SG
  SubnetIDs:
    Type: CommaDelimitedList
    Default: subnet-08e4323cf74cb322a,subnet-02465a0b825df1219
  VpcID:
    Type: String
    Default: vpc-0945ecce97364ef42
  LoadBalancerName:
    Type: String
    Default: ALB-ECS-Service
Resources:
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: demo
      TaskDefinition: arn:aws:ecs:us-east-1:433337163311:task-definition/TaskDefinatioECS-Service:2
      LaunchType: FARGATE
      ServiceName: ECS-Service
      SchedulingStrategy: REPLICA
      DesiredCount: 2
      LoadBalancers:
      - ContainerName: flaskapp
        ContainerPort: 80
        LoadBalancerName:
          Ref: AWS::NoValue
        TargetGroupArn:
          Ref: TargetGroup
      HealthCheckGracePeriodSeconds: '10'
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - Ref: SecurityGroup
          Subnets:
            Ref: SubnetIDs
      PlatformVersion: LATEST
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      DeploymentController:
        Type: ECS
      ServiceConnectConfiguration:
        Enabled: false
      Tags: []
      EnableECSManagedTags: true
    DependsOn:
    - Listener
    
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SecurityGroup for ECS
      GroupName: ECS-SG
      VpcId: vpc-0945ecce97364ef42
      SecurityGroupIngress:
      - FromPort: 80
        ToPort: 80
        IpProtocol: tcp
        CidrIp: 0.0.0.0/0
      - FromPort: 80
        ToPort: 80
        IpProtocol: tcp
        CidrIpv6: "::/0"
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Name: ALB-ECS-Service
      SecurityGroups:
      - Ref: SecurityGroup
      Subnets:
        Ref: SubnetIDs
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: "/"
      Name: ECS-TG
      Port: 80
      Protocol: HTTP
      TargetType: ip
      HealthCheckProtocol: HTTP
      VpcId:
        Ref: VpcID
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: TargetGroup
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: 80
      Protocol: HTTP
Outputs:
  ClusterName:
    Description: The cluster used to create the service.
    Value:
      Ref: ECSClusterName
  ECSService:
    Description: The created service.
    Value:
      Ref: ECSService
  LoadBalancer:
    Description: The created load balancer.
    Value:
      Ref: LoadBalancer
  Listener:
    Description: The created listener.
    Value:
      Ref: Listener
  TargetGroup:
    Description: The created target group.
    Value:
      Ref: TargetGroup



  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: ECSDeploymentApp
      ComputePlatform: Server

  CodeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: ECSDeploymentApp
      DeploymentGroupName: ECSDeploymentGroup
      DeploymentConfigName: CodeDeployDefault.ECSCanary10Percent
      ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn
      DeploymentStyle:
        DeploymentType: BLUE_GREEN
        DeploymentOption: WITH_TRAFFIC_CONTROL
      BlueGreenDeploymentConfiguration:
        DeploymentReadyOption:
          ActionOnTimeout: CONTINUE_DEPLOYMENT
        GreenFleetProvisioningOption:
          Action: COPY_AUTO_SCALING_GROUP
        TrafficRoutingConfig:
          Type: TIME_BASED_CANARY
          TimeBasedCanary:
            CanaryPercentage: 10
            CanariedTrafficPercent: 10
      LoadBalancerInfo:
        TargetGroupInfoList:
          - Name: TargetGroup 


      - Name: Deploy
        Actions:
          - Name: DeployAction
            ActionTypeId:
              Category: Deploy
              Owner: AWS
              Version: '1'
              Provider: ECS
            InputArtifacts:
              - Name: SourceCode
            Configuration:
              ClusterName: !Ref ECSCluster
              ServiceName: !Ref ECSService



      TaskDefinition: arn:aws:ecs:us-east-1:433337163311:task-definition/ECSTaskDefination:1
